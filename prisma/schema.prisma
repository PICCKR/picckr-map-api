generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum OrderStatus {
    REQUESTING
    PENDING
    COMPLETED
}

enum PackageStatus {
    HEADING_TO_PICKUP
    HEADING_TO_RECIPIENT_DESTINATION
    DELIVERED
    CONFIRMED
}

enum DeclinedBy {
    DRIVER
    SENDER
    TIMEOUT
}

enum DeclineType {
    CANCEL
    DISPUTE
}

enum Role {
    ADMIN
    DRIVER
    USER
}

enum UserStatus {
    ONLINE
    OFFLINE
    ON_RIDE
}

enum Country {
    USA
    NIGERIA
}

model User {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    fullName   String
    country    Country
    phone      String     @unique
    password   String
    isVerified Boolean    @default(false)
    role       Role       @default(USER)
    status     UserStatus @default(OFFLINE)
    active     Boolean    @default(true)

    // firstName     String
    // lastName      String
    // username      String     @unique
    // phone         String     @unique
    // phoneVerified Boolean    @default(false)
    // mode          String?
    // cognitoId     String?
    // userRole      Role       @default(USER)
    // email         String?
    // status        UserStatus @default(OFFLINE)
    // activated     Boolean    @default(true)
    // picture       String?
}

model PinCode {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    phone     String
    code      Int
    expiresAt DateTime
    used      Boolean  @default(false)
}

model Address {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   String
    city      String
    state     String
    country   String
    zipCode   String
    location  String
}

model PhoneVerification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    phone     String   @unique
    code      String
    expiredAt DateTime
    used      Boolean  @default(false)
}

model Vehicle {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    picture   String
    capacity  Int?
}

model Booking {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    senderId            String
    category            String
    specialInstructions String
}

model Package {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    senderId          String
    bookingId         String
    senderLocation    String
    recipientLocation String
    weight            Int
    dimensions        String
    type              String
    pickUpDate        DateTime
    // vehicleType 
}

model Decline {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    declinedBy DeclinedBy
    spentTime  Int
    trackerId  String
    driverId   String
    senderId   String
    type       DeclineType?
}

model Tracker {
    id                String         @id @default(auto()) @map("_id") @db.ObjectId
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    senderId          String
    bookingId         String
    senderLocation    String
    recipientLocation String
    orderStatus       OrderStatus    @default(REQUESTING)
    driverId          String?
    spentTime         Int?           @default(0)
    packageStatus     PackageStatus?
    pinCode           Int?
}

model ChatRoom {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    trackerId String    @unique
    messages  Message[]
}

model Message {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    content    String
    ownerId    String
    chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
    chatRoomId String?   @db.ObjectId
}
