generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// enum Reply {
//     REJECTED
//     ACCEPTED
// }

// enum Status {
//     CANCLED
//     COMPLETED
// }

// model Order {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     bookingId String   @unique @db.ObjectId
//     driverId  String?  @db.ObjectId
//     reply     Reply?
//     status    Status?
//     driver    Driver?  @relation(fields: [driverId], references: [id])
// }

// model Driver {
//     id         String   @id @default(auto()) @map("_id") @db.ObjectId
//     createdAt  DateTime @default(now())
//     updatedAt  DateTime @updatedAt
//     identifier String   @unique @db.ObjectId
//     location   String
//     orders     Order[]
// }

enum OrderStatus {
    REQUESTING
    PENDING
    ACCEPTED_BY_DRIVER
    ACCEPTED_BY_SENDER
    DECLINED_BY_DRIVER
    DECLINED_BY_SENDER
    CANCELED_BY_DRIVER
    CANCELED_BY_SENDER
    COMPLETED
}

enum PackageStatus {
    HEADING_TO_PICKUP
    HEADING_TO_RECIPIENT_DESTINATION
    DELIVERED
    CONFIRMED
}

enum DeclinedBy {
    DRIVER
    SENDER
    TIMEOUT
}

enum DeclineType {
    CANCEL
    DISPUTE
}

model Decline {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    declinedBy DeclinedBy
    spentTime  Int
    trackerId  String
    driverId   String
    type       DeclineType?
}

model Tracker {
    id                String         @id @default(auto()) @map("_id") @db.ObjectId
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    senderId          String
    bookingId         String
    senderLocation    String
    recipientLocation String
    orderStatus       OrderStatus    @default(REQUESTING)
    driverId          String?
    spentTime         Int?           @default(0)
    packageStatus     PackageStatus?
    pinCode           Int?
}

model ChatRoom {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    trackerId String    @unique
    messages  Message[]
}

model Message {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    content    String
    ownerId    String
    chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
    chatRoomId String?   @db.ObjectId
}
