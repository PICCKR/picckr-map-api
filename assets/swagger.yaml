openapi: 3.0.2
info:
  title: REST API PicckR map
  version: 1.1.0
  description: |-
    # PicckR MAP API
    This is the REST API for PicckR map to manage orders through all the process from ordering, tracking and delivery

    ## Workflow

    1. User submits an order by providing a `DESTINATION_LOCATION`.

    2. **PicckR MAP API** will then find the **nearest** `DRIVERS` to the `DESTINATION_LOCATION` and send them a `PUSH_NOTIFICATION` to `ACCEPT` or `DECLINE` the order.

       1. If the `DRIVER` `DECLINE` the order, **PicckR MAP API** will `SAVE_DECLINED_ORDER_IN_DATABASE` and keep waiting for the next `DRIVER` to `ACCEPT` the order.

       2. If the `DRIVER` `ACCEPT` the order, **PicckR MAP API** will `SAVE_ACCEPTED_ORDER_IN_DATABASE` and send a `PUSH_NOTIFICATION` to the `USER` to share with him the `DRIVER` `CONTACT_INFORMATION` and open a `CHAT_ROOM` between them.

       3. An auto-generated `CONFIRMATION_CODE` will be generated and shared with the `USER` and the `DRIVER` to be used as a **confirmation** for the `DRIVER` to make sure that the `RECEIVER` is the `DEDICATED_USER` for the order.

    3. **PicckR MAP API** will then `SAVE_ORDER_IN_DATABASE` and `SAVE_ORDER_STATUS_IN_DATABASE` as `PENDING`.

    4. **PicckR MAP API** will then `TRACK_DRIVER_LOCATION` and display it on the map for the `USER`.

    5. When the `DRIVER` `ARRIVE` to the `DESTINATION_LOCATION`, he will `CHANGE_ORDER_STATUS_IN_DATABASE` to `ARRIVED`.

    6. When the `USER` `CONFIRM` that he received his order, he will `CHANGE_ORDER_STATUS_IN_DATABASE` to `DELIVERED`.

    7. The `CHAT_ROOM` will be `CLOSED` and the `DRIVER` will be `AVAILABLE` to take another order.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Driver:
      type: object
      properties:
        id:
          type: string
          description: The driver id
        identifier:
          type: string
          description: The driver identifier from the other Driver object from the other microservice
        location:
          type: array
          description: The driver location
          items:
            type: number
          minItems: 2
          maxItems: 2
        orders:
          type: array
          description: The driver orders
          items:
            type: string
            description: The orders ids
        createdAt:
          type: string
          description: The driver created date
        updatedAt:
          type: string
          description: The driver updated date
      required:
        - id
        - identifier
    CreateDriverInput:
      type: object
      properties:
        identifier:
          type: string
          description: The driver identifier from the other Driver object from the other microservice
        location:
          type: array
          description: The driver location
          items:
            type: number
          minItems: 2
          maxItems: 2
      required:
        - identifier

    Order:
      type: object
      properties:
        id:
          type: integer
          description: The order ID
        bookingId:
          type: string
          description: The booking ID
        driverId:
          type: string
          description: The driver ID
        reply:
          type: string
          description: The reply of the driver, (accept or reject)
        status:
          type: string
          description: The current status of the order, (canceled, completed)
        createdAt:
          type: string
          description: The date of creation of the order
        updatedAt:
          type: string
          description: The date of the last update of the order
      example:
        id: 64efb34cf479d2c90237ad59
        bookingId: 64efb34cf479d2c90237ad59
        driverId: 64efb34cf479d2c90237ad59
        reply: null
        status: null
        createdAt: "2021-05-01T00:00:00.000Z"
        updatedAt: "2021-05-01T00:00:00.000Z"
    CreateOrderInput:
      type: string
      properties:
        bookingId:
          type: string
          description: The booking ID
      example:
        bookingId: 64efb34cf479d2c90237ad59

security:
  - bearerAuth: []
servers:
  - url: https://picckr-map-api.vercel.app/
    description: PicckR REST API on Vercel
paths:
  /api:
    get:
      summary: Welcome to the PicckR Map API
      tags:
        - Welcome
      responses:
        "200":
          description: message "Welcome to the PicckR Map API"
  /api/driver:
    get:
      summary: Get all drivers
      tags:
        - MapAPI.Driver
      responses:
        "200":
          description: list of drivers
        "500":
          description: message "Internal server error"
    post:
      summary: Create a driver
      tags:
        - MapAPI.Driver
      requestBody:
        description: The driver to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDriverInput"
      responses:
        "201":
          description: The driver created
        "409":
          description: message "Driver already exists"
        "500":
          description: message "Internal server error"
  /api/driver/id/{identifier}:
    get:
      summary: Get driver by identifier
      tags:
        - MapAPI.Driver
      parameters:
        - name: identifier
          in: path
          description: The driver identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The driver object
        "404":
          description: message "Driver not found"
        "500":
          description: message "Internal server error"
    patch:
      summary: Update driver location
      tags:
        - MapAPI.Driver
      parameters:
        - name: identifier
          in: path
          description: The driver identifier
          required: true
          schema:
            type: string
      requestBody:
        description: The driver location to update
        required: true
        content:
          application/json:
            schema:
              type: array
              description: The driver location
              items:
                type: number
              minItems: 2
              maxItems: 2
      responses:
        "200":
          description: The driver object
        "404":
          description: message "Driver not found"
        "500":
          description: message "Internal server error"
    delete:
      summary: Delete driver by identifier
      tags:
        - MapAPI.Driver
      parameters:
        - name: identifier
          in: path
          description: The driver identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The driver object
        "404":
          description: message "Driver not found" and an error object
  /api/driver/locations:
    get:
      summary: Get all drivers locations
      tags:
        - MapAPI.Driver
      responses:
        "200":
          description: list of drivers locations with their identifiers
        "500":
          description: message "Internal server error"
  /api/driver/id/{identifier}/location:
    patch:
      summary: Update driver location
      tags:
        - MapAPI.Driver
      parameters:
        - name: identifier
          in: path
          description: The driver identifier
          required: true
          schema:
            type: string
      requestBody:
        description: The driver location to update
        required: true
        content:
          application/json:
            schema:
              type: array
              description: The driver location
              items:
                type: number
              minItems: 2
              maxItems: 2
      responses:
        "200":
          description: The driver new location
        "400":
          description: message "Location is not valid"
        "500":
          description: message "Internal server error"

  /api/location/nearby/drivers/{max}:
    post:
      summary: Get nearby drivers list with length max
      tags:
        - Location
      parameters:
        - name: max
          in: path
          required: true
          description: The max length of the drivers list you like
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 10
      requestBody:
        description: Specifying the 'targetLocation' (destination)
        required: true
        content:
          application/json:
            schema:
              type: string
            example:
              targetLocation: 33.960535, -6.859669
      responses:
        "200":
          description: The nearby locations list
  /api/order:
    get:
      summary: Get all orders
      tags:
        - MapAPI.Order
      responses:
        "200":
          description: message "Get all orders"
    post:
      summary: Create a new order
      tags:
        - MapAPI.Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderInput"
      responses:
        "200":
          description: message "Create a new order"
        "400":
          description: message "Invalid request body"
        "409":
          description: message "Order with bookingId already exists"
  /api/order/id/{id}:
    get:
      summary: Get order by id
      tags:
        - MapAPI.Order
      parameters:
        - name: id
          in: path
          required: true
          description: The order id
          schema:
            type: string
      responses:
        "200":
          description: message "Get order by id"
        "404":
          description: message "Order not found"
    delete:
      summary: Delete order by id
      tags:
        - MapAPI.Order
      parameters:
        - name: id
          in: path
          required: true
          description: The order id
          schema:
            type: string
      responses:
        "200":
          description: message "Delete order by id"
        "404":
          description: message "Order with id wasn't deleted" and error object

tags: []
